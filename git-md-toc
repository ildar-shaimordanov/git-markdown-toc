#!/usr/bin/env perl

=head1 NAME

git-md-toc - generate the table of content from the Markdown file(s)

=head1 SYNOPSIS

  git-md-toc [OPTIONS]

=head1 DESCRIPTION

Read an input and generate the table of content (TOC) based on the
markup of the file which is assumed Markdown formatted. The outcome is
also formatted as Markdown.

The following HTML comments are recognized in a special way and handled
as the markers to insert new TOC or update existing one.

=over 4

=item C<< <!-- md-toc --> >>

is used to point the place in the document where to put a new TOC.

=item C<< <!-- md-toc-begin --> >>, C<< <!-- md-toc-end --> >>

are used to point the beginning and end of the existing TOC.

=back

Be noticed that these markers themselves must be sticky to the left edge
of the lines where they are situated. This rule doesn't spread on the
content within.

The updated TOC is always ended with double new line to separate from
the further text below. On the same reason, if the TOC is preceded with
some text above, the double new line is prepended the TOC.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print this help and exit.

=item B<-t> I<TITLE>, B<--title>=I<TITLE>

Set the title for the table of content. If not specified, the default
value C<Table of Content> is assumed.

=item B<-l> I<LEVEL>, B<--level>=I<LEVEL>

Set the header level used for the TOC title. Available values are C<1>
to C<6>. The default value is C<1>.

=item B<-d> I<DEPTH>, B<--depth>=I<DEPTH>

Use C<DEPTH> to control how many levels of headers to include in the
TOC. Available values are C<1> to C<6>. Defaults to C<6>.

=item B<-T> I<ENCODE>, B<--transcode>=I<ENCODE>

Apply another encoding to each file. It should be specified explicitly to
parse inputs in UTF-8 or other encodings.

=item B<--title-transcode>=I<ENCODE>

Apply another encoding to the title. If specified, it overwrites the
encoding specified with B<-T>. It can be useful in DOS sessions for
setting another encoding for the title declared in the command line.

For example, to correctly set the title in Cyrillic in UTF8 encoded
files I needed to declare C<cp1251> for the title encoding.

=item B<-u>, B<--update>

Update the file with the new table of content. It works even when reading
from STDIN. In this case the outcome will be printed to STDOUT.

=item B<-c>, B<--create-before>

=item B<-C>, B<--create-after>

Create and add the TOCs before and/or after the input.

Together the B<-u>/B<--update> option they allow to create and insert
the TOCs from the scratch even if no any TOC markers not specified.

=back

=head1 SEE ALSO

=head2 Syntax specification

=over 4

=item L<https://daringfireball.net/projects/markdown/>

=back

=head2 Perl implementations

=over 4

=item L<https://metacpan.org/pod/Text::Markdown>

=item L<https://metacpan.org/pod/Text::MultiMarkdown>

=item L<https://metacpan.org/pod/Markdown::TOC>

=back

=head2 Some other implementations

=over 4

=item L<https://github.com/ekalinin/github-markdown-toc>

=item L<https://github.com/ekalinin/github-markdown-toc.go>

=item L<https://github.com/frnmst/md-toc>

=item L<https://github.com/eGavr/toc-md>

=item L<https://github.com/jonschlinkert/markdown-toc>

=back

=head1 AUTHORS

Ildar Shaimordanov E<lt>F<ildar.shaimordanov@gmail.com>E<gt>

=head1 COPYRIGHT

Copyright (c) 2019-2022 Ildar Shaimordanov. All rights reserved.

  MIT License

=cut

use strict;
use warnings;

use Getopt::Long qw( :config no_ignore_case bundling );
use Pod::Usage;

my $toc_default_title = "Table of Content";
my $toc_title;
my $toc_level = 1;
my $toc_depth = 6;
my $update;
my $create_before;
my $create_after;
my $encode;
my $title_encode;

sub detect_encoding {
	my $encode = shift;
	use Encode;
	Encode::find_encoding($encode)
	or die "Encoding not found: $encode\n";
	return $encode;
}

exit 1 unless GetOptions(
	"h|help"	=> sub {
		pod2usage({ -verbose => 2, -noperldoc => 1 });
	},

	"t|title:s"	=> sub {
		$toc_title = $_[1] || $toc_default_title;
	},
	"l|level=i"	=> sub {
		( $toc_level = $_[1] ) =~ /^[1-6]$/
		or die "Integer expected in range [1..6]\n";
	},
	"d|depth=i"	=> sub {
		( $toc_depth = $_[1] ) =~ /^[1-6]$/
		or die "Integer expected in range [1..6]\n";
	},
	"T|transcode=s"	=> sub {
		$encode = detect_encoding($_[1]);
	},
	"title-transcode=s"	=> sub {
		$title_encode = detect_encoding($_[1]);
	},
	"u|update"	=> \$update,
	"c|create-before"	=> \$create_before,
	"C|create-after"	=> \$create_after,
);

pod2usage({ -verbose => 2, -noperldoc => 1 }) if -t 0 && @ARGV == 0;
@ARGV or @ARGV = "-";

# =========================================================================

my $name_toc		= "md-toc";
my $name_toc_begin	= "md-toc-begin";
my $name_toc_end	= "md-toc-end";

my $tag_toc		= "<!-- $name_toc -->";
my $tag_toc_begin	= "<!-- $name_toc_begin -->";
my $tag_toc_end		= "<!-- $name_toc_end -->";

my $re_toc = qr{
	^
	(?:
		<!-- [ \t]+ $name_toc		[ \t]+ --> [ \t\r]*
		|
		<!-- [ \t]+ $name_toc_begin	[ \t]+ --> [ \t\r]* \n
		(?: [\s\S]*? \n )*?
		<!-- [ \t]+ $name_toc_end	[ \t]+ --> [ \t\r]*
	)
	$
}msx;

$title_encode ||= $encode;
$toc_title = decode($title_encode, $toc_title)
if $title_encode && $toc_title;

foreach ( @ARGV ) {
	my $orig_text;
	{
		local $/;
		open F, $_ or die "Unable to open for reading: $_: $!\n";
		binmode F, ":encoding($encode)" if $encode;
		$orig_text = <F>;
		close F;
	};

	my $clean_text = $orig_text;

	# skip code fencing
	$clean_text =~ s{
		(?:\A|\n) [ \t]* (```|~~~) .*? \n [ \t]* \1
	}{}msgx;

	# skip any TOC markers
	$clean_text =~ s/$re_toc//g;

	# skip other HTML comments because they could contain markdown within
	$clean_text =~ s{
		(?:\A|\n) [ \t]* <!-- \s+ .*? \s+ -->
	}{}msgx;

	my %count = ();

	my @toc = ();

	push @toc, $tag_toc_begin;
	push @toc, "#" x $toc_level . " $toc_title" if $toc_title;

	while ( $clean_text =~ m{
		(?:\A|\n)
		[ ]{0,3}
		(?:
			# atx-style headers H1-H6
			( [#]{1,6} ) [ \t]+ ( .+? ) (?: [ \t]+ [#]* )?
			|
			# setext-style headers H1
			( \S[^\r\n]*? ) [ \t\r]* \n [ \t]* ( [=] )+
			|
			# setext-style header H2
			( (?![-]+)|[^\r\n]+? ) [ \t\r]* \n [ \t]* ( [-] )+
		)
		[ \t\r]*
		(?=\n)
	}mgx ) {
		my $depth;
		my $indent;
		my $title;

		if ( $1 && $2 ) {
			$depth = length($1);
			$title = $2;
		} elsif ( $4 && $3 ) {
			$depth = 1;
			$title = $3;
		} elsif ( $6 && $5 ) {
			$depth = 2;
			$title = $5;
		}

		next unless $title;
		next if $depth > $toc_depth;

		# Remove markdown images
		$title =~ s/\!\[.*?\]\(.*?\)//g;

		# Remove markdown links
		$title =~ s/\[(.*?)\]\(.*?\)/$1/g;

		# Remove html tags
		$title =~ s/<[^<>]*>//g;

		$indent = "  " x ( $depth - 1 );

		my $anchor = lc $title;
		$anchor =~ s/\s/-/g;
		$anchor =~ s/[^\w-]//g;

		$count{$anchor}++;

		$anchor .= ( 1 - $count{$anchor} or "" );

		# Avoid empty text within links
		$title =~ s/^\s*$/#/;

		push @toc, "$indent* [$title](#$anchor)";
	}

	push @toc, $tag_toc_end;

	my $toc = join "\n", @toc;

	unless ( $update ) {
		binmode STDOUT, ":encoding($encode)" if $encode;
		print "$toc\n";
		next;
	}

	$orig_text =~ s/$re_toc/$toc/g;

	# create TOCs before or after the input if requested
	$orig_text = "$toc\n\n$orig_text" if $create_before;
	$orig_text = "$orig_text\n$toc\n" if $create_after;

	warn "Updating $_\n";

	open F, ">$_" or die "Unable to open for writing: $_: $!\n";
	binmode F, ":encoding($encode)" if $encode;
	print F $orig_text;
	close F;
}

# =========================================================================

# EOF
